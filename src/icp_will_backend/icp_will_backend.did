type UserData = record {
  nickname : text;
  avatar_url : opt text;
};

type Account = record { owner : principal; subaccount : opt blob };
type Result = variant { Ok : nat; Err : text };
type TransferArgs = record { to_account : Account; amount : nat };

service : {
  "get_chat" : (vec principal) -> (opt vec text) query;
  "add_chat_msg" : (text, principal) -> ();
  "register" : (text) -> ();
  "get_users" : () -> (vec record { principal; UserData });
  "get_user" : (principal) -> (opt UserData);
  "transfer" : (TransferArgs) -> (Result);

  // mtlk todo
  // The following method is marked as 'update' because it internally performs an inter-canister call.
  // Consider performing the balance retrieval from the frontend?
  "get_balance" : () -> (Result);
};