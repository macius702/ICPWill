type Account = record { owner : principal; subaccount : opt blob };
type Asset = record { ticker : text; account_address : text; amount : nat64 };
type BatchTransfer = record {
  execution_delay_seconds : nat64;
  beneficiaries : vec Beneficiary;
  of_inactivity : bool;
};
type Beneficiary = record {
  nickname : text;
  beneficiary_principal : principal;
  assets : vec Asset;
  amount_icp : nat64;
};
type BitcoinNetwork = variant { mainnet; regtest; testnet };
type ResponseUserData = record {
  nickname : text;
  avatar_url : opt text;
  batch_transfer : opt BatchTransfer;
  has_active_timer : bool;
};
type Result = variant { Ok; Err : text };
type Result_1 = variant { Ok : nat; Err : text };
type TransferArgs = record {
  delay_in_seconds : nat64;
  to_account : Account;
  from_account : Account;
  amount : nat;
};
service : (BitcoinNetwork) -> {
  add_chat_msg : (text, principal) -> ();
  announce_activity : () -> ();
  btc_get_balance : (text) -> (nat64);
  btc_get_p2pkh_address : (vec blob) -> (text);
  cancel_activation : () -> (Result);
  cancel_batch_activation : () -> (Result);
  execute_batch_transfers : () -> (Result);
  get_balance : () -> (Result_1);
  get_chat : (vec principal) -> (opt vec text) query;
  get_user : (principal) -> (opt ResponseUserData) query;
  get_users : () -> (vec record { principal; ResponseUserData }) query;
  register : (text) -> ();
  register_batch_transfer : (BatchTransfer) -> (Result);
  transfer : (TransferArgs) -> (Result_1);
}
