



type Account = record { owner : principal; subaccount : opt blob };
type ResultNat = variant { Ok : nat; Err : text };
type Result = variant { Ok; Err : text };
type TransferArgs = record { to_account : Account; amount : nat };

type Beneficiary = record {
  beneficiary_principal : principal;
  nickname : opt text;
  amount_icp : nat64;
};

type BatchTransfer = record {
  beneficiaries : vec Beneficiary;
  execution_delay_seconds : nat64;
};




type UserData = record {
  nickname : text;
  avatar_url : opt text;
  batch_transfer: opt BatchTransfer;
};


service : {
  "get_chat" : (vec principal) -> (opt vec text) query;
  "add_chat_msg" : (text, principal) -> ();
  "register" : (text) -> ();
  "get_users" : () -> (vec record { principal; UserData });
  "get_user" : (principal) -> (opt UserData);
  "transfer" : (TransferArgs) -> (ResultNat);

  // mtlk todo
  // The following method is marked as 'update' because it internally performs an inter-canister call.
  // Consider performing the balance retrieval from the frontend?
  "get_balance" : () -> (ResultNat);

  "register_batch_transfer" : (
    batch_transfer_data : BatchTransfer  ) -> (Result);

};
